#include <Arduino.h>
#include <Modbus.h>
#include <ModbusSerial.h>

// DÃ©finir les broches UART
#define RXPIN 4
#define TXPIN 5

// Configuration de la communication
#define BAUD 9600
#define SLAVE_ID 1

// Registres Modbus
#define REG_TEMP 0  // Adresse du registre pour la tempÃ©rature

// Objet Modbus
ModbusSerial mb(Serial1, SLAVE_ID, -1);  // Pas de pin TX enable (pas RS485)

// Variable de tempÃ©rature simulÃ©e
uint16_t temperature = 200;  // Exemple 20.0Â°C (x10 pour conserver une prÃ©cision)

void setup() {
    Serial.begin(115200);
    Serial.println("ğŸš€ DÃ©marrage de l'ESP32 en Modbus RTU");

    // Configuration de Serial1 sur les GPIO dÃ©finis
    Serial1.begin(BAUD, SERIAL_8E1, RXPIN, TXPIN);

    // Initialisation Modbus
    mb.config(BAUD);
    mb.setAdditionalServerData("ESP32-Temp-Sensor");

    // CrÃ©ation du registre pour la tempÃ©rature
    mb.addIreg(REG_TEMP, temperature);

    Serial.println("âœ… Modbus RTU prÃªt - En attente de requÃªtes");
}

void loop() {
    // Mise Ã  jour de la tempÃ©rature (simulation simple, tu peux la remplacer par une vraie lecture de capteur)
    temperature = 200 + random(-10, 10);  // Entre 19.0Â°C et 21.0Â°C

    // Mise Ã  jour du registre avec la nouvelle tempÃ©rature
    mb.Ireg(REG_TEMP, temperature);

    // Traitement Modbus (rÃ©pond aux requÃªtes du maÃ®tre)
    mb.task();

}
